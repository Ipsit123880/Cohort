// You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
//   - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
// - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

//   Each todo has a title and a description. The title is a string and the description is a string.
//   Each todo should also get an unique autogenerated id every time it is created
//   The expected API endpoints are defined below,
//   1.GET /todos - Retrieve all todo items
//     Description: Returns a list of all todo items.
//     Response: 200 OK with an array of todo items in JSON format.
//     Example: GET http://localhost:3000/todos
    
//   2.GET /todos/:id - Retrieve a specific todo item by ID
//     Description: Returns a specific todo item identified by its ID.
//     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
//     Example: GET http://localhost:3000/todos/123
    
//   3. POST /todos - Create a new todo item
//     Description: Creates a new todo item.
//     Request Body: JSON object representing the todo item.
//     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
//     Example: POST http://localhost:3000/todos
//     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
//   4. PUT /todos/:id - Update an existing todo item by ID
//     Description: Updates an existing todo item identified by its ID.
//     Request Body: JSON object representing the updated todo item.
//     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
//     Example: PUT http://localhost:3000/todos/123
//     Request Body: { "title": "Buy groceries", "completed": true }
    
//   5. DELETE /todos/:id - Delete a todo item by ID
//     Description: Deletes a todo item identified by its ID.
//     Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
//     Example: DELETE http://localhost:3000/todos/123

  const express = require('express');
  const bodyParser = require('body-parser');
  const app = express();
  app.use(bodyParser.json());

  let todo = [
    {
        id: 1,
        title: "Cooking",
        description: "Chicken biryani",
        status: false
    },
    {
        id: 2,
        title: "Bathing",
        description: "Using sabun and bathing",
        status: false
    },
    {
        id: 3,
        title: "Reading",
        description: "Reading a book",
        status: false
    },
    {
        id: 4,
        title: "Exercise",
        description: "Morning yoga session",
        status: false
    },
    {
        id: 5,
        title: "Grocery Shopping",
        description: "Buy vegetables and fruits",
        status: false
    },
    {
        id: 6,
        title: "Laundry",
        description: "Wash and fold clothes",
        status: false
    },
    {
        id: 7,
        title: "Email",
        description: "Respond to work emails",
        status: false
    },
    {
        id: 8,
        title: "Meeting",
        description: "Client meeting at 2 PM",
        status: false
    }
];



  console.log(todo.length);

  app.get('/todos', (req, res) => {

    res.status(200).json({
        todo
        }
    );

  });

  app.get('/todos/:id', (req, res) => {
    const id =  req.params.id;
    
    for(let i = 0; i < todo.length; i++){
        if(todo[i].id == id){
            res.json(todo[i]);
            break;
        }
    }

    res.status(404).json({
        message : "Enter a correct Id"
    });

  });

  app.post("/todos", (req, res) => {

    let todos = req.body;
    todo.push(todos);

    res.status(201).send({
        message : "Ok"
    })


  })

  app.put("/todos/:id", (req, res) => {
    const id = req.params.id;
    let check = 0;

    for(let i = 0; i < todo.length; i++){
        if(id == todo[i].id){
            todo[i].status = (!todo[i].status);
            check = 1;
            break;
        }
    }

    if(check == 0){
        res.status(404).send({
            message : "Error Correct Id"
        })
    }
    else{
        res.status(200).send({
            message : "Updated"
        })
    }

  })

  app.delete("/todos/:id", (req, res) => {
      const id = req.params.id;
      let todos = [];

      for(let i = 0; i < todo.length; i++){
        if(id != todo[i]. id){
            todos.push(todo[i]);
        }
      }

      todo = todos;
      res.status(200).send({
        message : "Successfully deleted"
      })
  })


app.listen(3000, () => {
    console.log('Server is running on port 3000');

})
  
//   module.exports = app;
